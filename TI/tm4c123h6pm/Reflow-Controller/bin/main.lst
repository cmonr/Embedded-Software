
bin/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_text>:
       0:	2000011c 	.word	0x2000011c
       4:	0000079d 	.word	0x0000079d
       8:	00000795 	.word	0x00000795
       c:	00000797 	.word	0x00000797
      10:	00000799 	.word	0x00000799
      14:	00000799 	.word	0x00000799
      18:	00000799 	.word	0x00000799
	...
      2c:	00000799 	.word	0x00000799
      30:	00000799 	.word	0x00000799
      34:	00000000 	.word	0x00000000
      38:	00000799 	.word	0x00000799
      3c:	00000545 	.word	0x00000545
      40:	00000799 	.word	0x00000799
      44:	00000799 	.word	0x00000799
      48:	00000799 	.word	0x00000799
      4c:	00000799 	.word	0x00000799
      50:	00000799 	.word	0x00000799
      54:	00000799 	.word	0x00000799
      58:	00000799 	.word	0x00000799
      5c:	00000799 	.word	0x00000799
      60:	00000799 	.word	0x00000799
      64:	00000799 	.word	0x00000799
      68:	00000799 	.word	0x00000799
      6c:	00000799 	.word	0x00000799
      70:	00000799 	.word	0x00000799
      74:	00000799 	.word	0x00000799
      78:	00000799 	.word	0x00000799
      7c:	00000799 	.word	0x00000799
      80:	00000799 	.word	0x00000799
      84:	00000799 	.word	0x00000799
      88:	00000799 	.word	0x00000799
      8c:	00000529 	.word	0x00000529
      90:	00000799 	.word	0x00000799
      94:	00000799 	.word	0x00000799
      98:	00000799 	.word	0x00000799
      9c:	00000799 	.word	0x00000799
      a0:	00000799 	.word	0x00000799
      a4:	00000799 	.word	0x00000799
      a8:	00000799 	.word	0x00000799
      ac:	00000799 	.word	0x00000799
      b0:	00000799 	.word	0x00000799
      b4:	00000799 	.word	0x00000799
      b8:	00000799 	.word	0x00000799
      bc:	00000799 	.word	0x00000799
      c0:	00000799 	.word	0x00000799
      c4:	00000799 	.word	0x00000799
      c8:	00000799 	.word	0x00000799
      cc:	00000799 	.word	0x00000799
      d0:	00000799 	.word	0x00000799
      d4:	00000799 	.word	0x00000799
      d8:	00000799 	.word	0x00000799
      dc:	00000799 	.word	0x00000799
      e0:	00000799 	.word	0x00000799
      e4:	00000799 	.word	0x00000799
      e8:	00000000 	.word	0x00000000
      ec:	00000799 	.word	0x00000799
      f0:	00000799 	.word	0x00000799
      f4:	00000799 	.word	0x00000799
      f8:	00000799 	.word	0x00000799
      fc:	00000799 	.word	0x00000799
     100:	00000799 	.word	0x00000799
     104:	00000799 	.word	0x00000799
     108:	00000799 	.word	0x00000799
     10c:	00000799 	.word	0x00000799
	...
     118:	00000799 	.word	0x00000799
     11c:	00000799 	.word	0x00000799
     120:	00000799 	.word	0x00000799
     124:	00000799 	.word	0x00000799
     128:	00000799 	.word	0x00000799
     12c:	00000799 	.word	0x00000799
     130:	00000799 	.word	0x00000799
     134:	00000799 	.word	0x00000799
     138:	00000799 	.word	0x00000799
     13c:	00000799 	.word	0x00000799
	...
     150:	00000799 	.word	0x00000799
     154:	00000799 	.word	0x00000799
     158:	00000799 	.word	0x00000799
     15c:	00000799 	.word	0x00000799
	...
     1b0:	00000799 	.word	0x00000799
     1b4:	00000799 	.word	0x00000799
     1b8:	00000799 	.word	0x00000799
     1bc:	00000799 	.word	0x00000799
     1c0:	00000799 	.word	0x00000799
     1c4:	00000799 	.word	0x00000799
     1c8:	00000799 	.word	0x00000799
     1cc:	00000799 	.word	0x00000799
     1d0:	00000799 	.word	0x00000799
     1d4:	00000799 	.word	0x00000799
     1d8:	00000799 	.word	0x00000799
     1dc:	00000799 	.word	0x00000799
     1e0:	00000799 	.word	0x00000799
     1e4:	00000799 	.word	0x00000799
     1e8:	00000799 	.word	0x00000799
     1ec:	00000799 	.word	0x00000799
     1f0:	00000799 	.word	0x00000799
     1f4:	00000799 	.word	0x00000799
     1f8:	00000799 	.word	0x00000799
     1fc:	00000799 	.word	0x00000799
     200:	00000799 	.word	0x00000799
     204:	00000799 	.word	0x00000799
     208:	00000799 	.word	0x00000799
     20c:	00000000 	.word	0x00000000
     210:	00000799 	.word	0x00000799
     214:	00000799 	.word	0x00000799
     218:	00000799 	.word	0x00000799
     21c:	00000799 	.word	0x00000799
     220:	00000799 	.word	0x00000799
     224:	00000799 	.word	0x00000799
     228:	00000799 	.word	0x00000799
     22c:	00000799 	.word	0x00000799
     230:	00000799 	.word	0x00000799
     234:	00000799 	.word	0x00000799
     238:	00000799 	.word	0x00000799
     23c:	00000799 	.word	0x00000799
     240:	00000799 	.word	0x00000799
     244:	00000799 	.word	0x00000799
     248:	00000799 	.word	0x00000799
     24c:	00000799 	.word	0x00000799
     250:	00000799 	.word	0x00000799
     254:	00000799 	.word	0x00000799
     258:	00000799 	.word	0x00000799
     25c:	00000799 	.word	0x00000799
     260:	00000799 	.word	0x00000799
     264:	00000799 	.word	0x00000799
     268:	00000799 	.word	0x00000799

0000026c <UARTStdioConfig>:
//! \return None.
//
//*****************************************************************************
void
UARTStdioConfig(uint32_t ui32PortNum, uint32_t ui32Baud, uint32_t ui32SrcClock)
{
     26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#endif

    //
    // Check to make sure the UART peripheral is present.
    //
    if(!MAP_SysCtlPeripheralPresent(g_ui32UARTPeriph[ui32PortNum]))
     270:	4b11      	ldr	r3, [pc, #68]	; (2b8 <UARTStdioConfig+0x4c>)
     272:	4f12      	ldr	r7, [pc, #72]	; (2bc <UARTStdioConfig+0x50>)
     274:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
     278:	683b      	ldr	r3, [r7, #0]
//! \return None.
//
//*****************************************************************************
void
UARTStdioConfig(uint32_t ui32PortNum, uint32_t ui32Baud, uint32_t ui32SrcClock)
{
     27a:	4605      	mov	r5, r0
#endif

    //
    // Check to make sure the UART peripheral is present.
    //
    if(!MAP_SysCtlPeripheralPresent(g_ui32UARTPeriph[ui32PortNum]))
     27c:	691b      	ldr	r3, [r3, #16]
     27e:	4630      	mov	r0, r6
//! \return None.
//
//*****************************************************************************
void
UARTStdioConfig(uint32_t ui32PortNum, uint32_t ui32Baud, uint32_t ui32SrcClock)
{
     280:	4688      	mov	r8, r1
     282:	4691      	mov	r9, r2
#endif

    //
    // Check to make sure the UART peripheral is present.
    //
    if(!MAP_SysCtlPeripheralPresent(g_ui32UARTPeriph[ui32PortNum]))
     284:	4798      	blx	r3
     286:	b1a0      	cbz	r0, 2b2 <UARTStdioConfig+0x46>
    }

    //
    // Select the base address of the UART.
    //
    g_ui32Base = g_ui32UARTBase[ui32PortNum];
     288:	4b0d      	ldr	r3, [pc, #52]	; (2c0 <UARTStdioConfig+0x54>)
     28a:	4c0e      	ldr	r4, [pc, #56]	; (2c4 <UARTStdioConfig+0x58>)
     28c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    MAP_SysCtlPeripheralEnable(g_ui32UARTPeriph[ui32PortNum]);

    //
    // Configure the UART for 115200, n, 8, 1
    //
    MAP_UARTConfigSetExpClk(g_ui32Base, ui32SrcClock, ui32Baud,
     290:	4d0d      	ldr	r5, [pc, #52]	; (2c8 <UARTStdioConfig+0x5c>)
    }

    //
    // Select the base address of the UART.
    //
    g_ui32Base = g_ui32UARTBase[ui32PortNum];
     292:	6023      	str	r3, [r4, #0]

    //
    // Enable the UART peripheral for use.
    //
    MAP_SysCtlPeripheralEnable(g_ui32UARTPeriph[ui32PortNum]);
     294:	683b      	ldr	r3, [r7, #0]
     296:	4630      	mov	r0, r6
     298:	699b      	ldr	r3, [r3, #24]
     29a:	4798      	blx	r3

    //
    // Configure the UART for 115200, n, 8, 1
    //
    MAP_UARTConfigSetExpClk(g_ui32Base, ui32SrcClock, ui32Baud,
     29c:	682b      	ldr	r3, [r5, #0]
     29e:	6820      	ldr	r0, [r4, #0]
     2a0:	695e      	ldr	r6, [r3, #20]
     2a2:	4649      	mov	r1, r9
     2a4:	2360      	movs	r3, #96	; 0x60
     2a6:	4642      	mov	r2, r8
     2a8:	47b0      	blx	r6
#endif

    //
    // Enable the UART operation.
    //
    MAP_UARTEnable(g_ui32Base);
     2aa:	682b      	ldr	r3, [r5, #0]
     2ac:	6820      	ldr	r0, [r4, #0]
     2ae:	69db      	ldr	r3, [r3, #28]
     2b0:	4798      	blx	r3
     2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     2b6:	bf00      	nop
     2b8:	000010a4 	.word	0x000010a4
     2bc:	01000044 	.word	0x01000044
     2c0:	00001078 	.word	0x00001078
     2c4:	20000000 	.word	0x20000000
     2c8:	01000014 	.word	0x01000014

000002cc <UARTwrite>:
//! \return Returns the count of characters written.
//
//*****************************************************************************
int
UARTwrite(const char *pcBuf, uint32_t ui32Len)
{
     2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     2d0:	4f0d      	ldr	r7, [pc, #52]	; (308 <UARTwrite+0x3c>)
     2d2:	4e0e      	ldr	r6, [pc, #56]	; (30c <UARTwrite+0x40>)
     2d4:	460d      	mov	r5, r1
     2d6:	4604      	mov	r4, r0
     2d8:	eb00 0801 	add.w	r8, r0, r1
    ASSERT(pcBuf != 0);

    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui32Len; uIdx++)
     2dc:	4544      	cmp	r4, r8
     2de:	d00f      	beq.n	300 <UARTwrite+0x34>
    {
        //
        // If the character to the UART is \n, then add a \r before it so that
        // \n is translated to \n\r in the output.
        //
        if(pcBuf[uIdx] == '\n')
     2e0:	f814 3b01 	ldrb.w	r3, [r4], #1
     2e4:	2b0a      	cmp	r3, #10
     2e6:	d104      	bne.n	2f2 <UARTwrite+0x26>
        {
            MAP_UARTCharPut(g_ui32Base, '\r');
     2e8:	683b      	ldr	r3, [r7, #0]
     2ea:	6830      	ldr	r0, [r6, #0]
     2ec:	681b      	ldr	r3, [r3, #0]
     2ee:	210d      	movs	r1, #13
     2f0:	4798      	blx	r3
        }

        //
        // Send the character to the UART output.
        //
        MAP_UARTCharPut(g_ui32Base, pcBuf[uIdx]);
     2f2:	683b      	ldr	r3, [r7, #0]
     2f4:	6830      	ldr	r0, [r6, #0]
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	f814 1c01 	ldrb.w	r1, [r4, #-1]
     2fc:	4798      	blx	r3
     2fe:	e7ed      	b.n	2dc <UARTwrite+0x10>
    //
    // Return the number of characters written.
    //
    return(uIdx);
#endif
}
     300:	4628      	mov	r0, r5
     302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     306:	bf00      	nop
     308:	01000014 	.word	0x01000014
     30c:	20000000 	.word	0x20000000

00000310 <UARTvprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTvprintf(const char *pcString, va_list vaArgP)
{
     310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
                    {
                        pcBuf[ui32Pos++] =
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
     314:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 4b8 <UARTvprintf+0x1a8>
//! \return None.
//
//*****************************************************************************
void
UARTvprintf(const char *pcString, va_list vaArgP)
{
     318:	b087      	sub	sp, #28
     31a:	4606      	mov	r6, r0
     31c:	460c      	mov	r4, r1
     31e:	af02      	add	r7, sp, #8
    ASSERT(pcString != 0);

    //
    // Loop while there are more characters in the string.
    //
    while(*pcString)
     320:	7833      	ldrb	r3, [r6, #0]
     322:	2b00      	cmp	r3, #0
     324:	f000 80c1 	beq.w	4aa <UARTvprintf+0x19a>
     328:	4633      	mov	r3, r6
     32a:	1b99      	subs	r1, r3, r6
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
     32c:	461d      	mov	r5, r3
     32e:	f813 2b01 	ldrb.w	r2, [r3], #1
    while(*pcString)
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
     332:	2a25      	cmp	r2, #37	; 0x25
     334:	d10d      	bne.n	352 <UARTvprintf+0x42>
        }

        //
        // Write this portion of the string.
        //
        UARTwrite(pcString, ui32Idx);
     336:	4630      	mov	r0, r6
     338:	f7ff ffc8 	bl	2cc <UARTwrite>
        pcString += ui32Idx;

        //
        // See if the next character is a %.
        //
        if(*pcString == '%')
     33c:	782b      	ldrb	r3, [r5, #0]
     33e:	2b25      	cmp	r3, #37	; 0x25
     340:	bf18      	it	ne
     342:	462e      	movne	r6, r5
     344:	d1ec      	bne.n	320 <UARTvprintf+0x10>
        {
            //
            // Skip the %.
            //
            pcString++;
     346:	1c68      	adds	r0, r5, #1
            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
            cFill = ' ';
     348:	f04f 0e20 	mov.w	lr, #32

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32Count = 0;
     34c:	2500      	movs	r5, #0
                    }

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
     34e:	220a      	movs	r2, #10
     350:	e010      	b.n	374 <UARTvprintf+0x64>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32Idx = 0;
            (pcString[ui32Idx] != '%') && (pcString[ui32Idx] != '\0');
     352:	2a00      	cmp	r2, #0
     354:	d1e9      	bne.n	32a <UARTvprintf+0x1a>
     356:	e7ee      	b.n	336 <UARTvprintf+0x26>
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
     358:	d824      	bhi.n	3a4 <UARTvprintf+0x94>
     35a:	2b39      	cmp	r3, #57	; 0x39
     35c:	d815      	bhi.n	38a <UARTvprintf+0x7a>
     35e:	2b30      	cmp	r3, #48	; 0x30
     360:	d30e      	bcc.n	380 <UARTvprintf+0x70>
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pcString[-1] == '0') && (ui32Count == 0))
     362:	d103      	bne.n	36c <UARTvprintf+0x5c>
                    {
                        cFill = '0';
     364:	2d00      	cmp	r5, #0
     366:	bf08      	it	eq
     368:	f04f 0e30 	moveq.w	lr, #48	; 0x30

                    //
                    // Update the digit count.
                    //
                    ui32Count *= 10;
                    ui32Count += pcString[-1] - '0';
     36c:	fb02 3505 	mla	r5, r2, r5, r3
     370:	3d30      	subs	r5, #48	; 0x30
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
     372:	4630      	mov	r0, r6
     374:	4606      	mov	r6, r0
     376:	f816 3b01 	ldrb.w	r3, [r6], #1
     37a:	2b64      	cmp	r3, #100	; 0x64
     37c:	d1ec      	bne.n	358 <UARTvprintf+0x48>
     37e:	e01d      	b.n	3bc <UARTvprintf+0xac>
     380:	2b25      	cmp	r3, #37	; 0x25
     382:	f040 808b 	bne.w	49c <UARTvprintf+0x18c>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UARTwrite(pcString - 1, 1);
     386:	2101      	movs	r1, #1
     388:	e08a      	b.n	4a0 <UARTvprintf+0x190>
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
     38a:	2b58      	cmp	r3, #88	; 0x58
     38c:	d03c      	beq.n	408 <UARTvprintf+0xf8>
     38e:	2b63      	cmp	r3, #99	; 0x63
     390:	f040 8084 	bne.w	49c <UARTvprintf+0x18c>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
     394:	6823      	ldr	r3, [r4, #0]
     396:	a806      	add	r0, sp, #24
     398:	f104 0904 	add.w	r9, r4, #4
     39c:	f840 3d14 	str.w	r3, [r0, #-20]!

                    //
                    // Print out the character.
                    //
                    UARTwrite((char *)&ui32Value, 1);
     3a0:	2101      	movs	r1, #1
     3a2:	e078      	b.n	496 <UARTvprintf+0x186>
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pcString++)
     3a4:	2b73      	cmp	r3, #115	; 0x73
     3a6:	d013      	beq.n	3d0 <UARTvprintf+0xc0>
     3a8:	d803      	bhi.n	3b2 <UARTvprintf+0xa2>
     3aa:	2b69      	cmp	r3, #105	; 0x69
     3ac:	d006      	beq.n	3bc <UARTvprintf+0xac>
     3ae:	2b70      	cmp	r3, #112	; 0x70
     3b0:	e002      	b.n	3b8 <UARTvprintf+0xa8>
     3b2:	2b75      	cmp	r3, #117	; 0x75
     3b4:	d022      	beq.n	3fc <UARTvprintf+0xec>
     3b6:	2b78      	cmp	r3, #120	; 0x78
     3b8:	d026      	beq.n	408 <UARTvprintf+0xf8>
     3ba:	e06f      	b.n	49c <UARTvprintf+0x18c>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
     3bc:	6823      	ldr	r3, [r4, #0]

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
     3be:	2b00      	cmp	r3, #0
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
     3c0:	f104 0904 	add.w	r9, r4, #4

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32Value < 0)
     3c4:	da1d      	bge.n	402 <UARTvprintf+0xf2>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32Value = -(int32_t)ui32Value;
     3c6:	425b      	negs	r3, r3
     3c8:	9301      	str	r3, [sp, #4]

                        //
                        // Indicate that the value is negative.
                        //
                        ui32Neg = 1;
     3ca:	2201      	movs	r2, #1
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32Base = 10;
     3cc:	230a      	movs	r3, #10
     3ce:	e021      	b.n	414 <UARTvprintf+0x104>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
     3d0:	f104 0904 	add.w	r9, r4, #4
     3d4:	6820      	ldr	r0, [r4, #0]

                    //
                    // Determine the length of the string.
                    //
                    for(ui32Idx = 0; pcStr[ui32Idx] != '\0'; ui32Idx++)
     3d6:	2400      	movs	r4, #0
     3d8:	5d03      	ldrb	r3, [r0, r4]
     3da:	b10b      	cbz	r3, 3e0 <UARTvprintf+0xd0>
     3dc:	3401      	adds	r4, #1
     3de:	e7fb      	b.n	3d8 <UARTvprintf+0xc8>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcStr, ui32Idx);
     3e0:	4621      	mov	r1, r4
     3e2:	f7ff ff73 	bl	2cc <UARTwrite>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32Count > ui32Idx)
     3e6:	42a5      	cmp	r5, r4
     3e8:	d95d      	bls.n	4a6 <UARTvprintf+0x196>
                    {
                        ui32Count -= ui32Idx;
     3ea:	1b2d      	subs	r5, r5, r4
                        while(ui32Count--)
     3ec:	2d00      	cmp	r5, #0
     3ee:	d05a      	beq.n	4a6 <UARTvprintf+0x196>
                        {
                            UARTwrite(" ", 1);
     3f0:	482f      	ldr	r0, [pc, #188]	; (4b0 <UARTvprintf+0x1a0>)
     3f2:	2101      	movs	r1, #1
     3f4:	f7ff ff6a 	bl	2cc <UARTwrite>
     3f8:	3d01      	subs	r5, #1
     3fa:	e7f7      	b.n	3ec <UARTvprintf+0xdc>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
     3fc:	6823      	ldr	r3, [r4, #0]
     3fe:	f104 0904 	add.w	r9, r4, #4
     402:	9301      	str	r3, [sp, #4]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
     404:	2200      	movs	r2, #0
     406:	e7e1      	b.n	3cc <UARTvprintf+0xbc>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32Value = va_arg(vaArgP, uint32_t);
     408:	6823      	ldr	r3, [r4, #0]
     40a:	f104 0904 	add.w	r9, r4, #4
     40e:	9301      	str	r3, [sp, #4]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32Neg = 0;
     410:	2200      	movs	r2, #0
                    ui32Pos = 0;

                    //
                    // Set the base to 16.
                    //
                    ui32Base = 16;
     412:	2310      	movs	r3, #16
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
                        (((ui32Idx * ui32Base) <= ui32Value) &&
     414:	f8dd c004 	ldr.w	ip, [sp, #4]
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
     418:	2001      	movs	r0, #1
                        (((ui32Idx * ui32Base) <= ui32Value) &&
     41a:	fb03 f100 	mul.w	r1, r3, r0
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
     41e:	4561      	cmp	r1, ip
     420:	d901      	bls.n	426 <UARTvprintf+0x116>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
     422:	b93a      	cbnz	r2, 434 <UARTvprintf+0x124>
     424:	e012      	b.n	44c <UARTvprintf+0x13c>
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
                        (((ui32Idx * ui32Base) <= ui32Value) &&
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
     426:	fbb1 f4f3 	udiv	r4, r1, r3
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32Idx = 1;
                        (((ui32Idx * ui32Base) <= ui32Value) &&
     42a:	4284      	cmp	r4, r0
     42c:	d1f9      	bne.n	422 <UARTvprintf+0x112>
                         (((ui32Idx * ui32Base) / ui32Base) == ui32Idx));
                        ui32Idx *= ui32Base, ui32Count--)
     42e:	3d01      	subs	r5, #1
     430:	4608      	mov	r0, r1
     432:	e7f2      	b.n	41a <UARTvprintf+0x10a>

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
     434:	f1be 0f30 	cmp.w	lr, #48	; 0x30
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32Neg)
                    {
                        ui32Count--;
     438:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32Neg && (cFill == '0'))
     43c:	d105      	bne.n	44a <UARTvprintf+0x13a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
     43e:	222d      	movs	r2, #45	; 0x2d
     440:	f88d 2008 	strb.w	r2, [sp, #8]
     444:	2101      	movs	r1, #1

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32Neg = 0;
     446:	2200      	movs	r2, #0
     448:	e001      	b.n	44e <UARTvprintf+0x13e>
     44a:	2201      	movs	r2, #1
     44c:	2100      	movs	r1, #0

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
     44e:	1eac      	subs	r4, r5, #2
     450:	2c0d      	cmp	r4, #13
     452:	d80b      	bhi.n	46c <UARTvprintf+0x15c>
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
     454:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
     458:	2400      	movs	r4, #0
     45a:	eb07 0b01 	add.w	fp, r7, r1
                        {
                            pcBuf[ui32Pos++] = cFill;
     45e:	f80b e004 	strb.w	lr, [fp, r4]
     462:	3401      	adds	r4, #1
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32Count > 1) && (ui32Count < 16))
                    {
                        for(ui32Count--; ui32Count; ui32Count--)
     464:	4554      	cmp	r4, sl
     466:	d1fa      	bne.n	45e <UARTvprintf+0x14e>
     468:	4429      	add	r1, r5
     46a:	3901      	subs	r1, #1

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32Neg)
     46c:	b12a      	cbz	r2, 47a <UARTvprintf+0x16a>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui32Pos++] = '-';
     46e:	aa06      	add	r2, sp, #24
     470:	440a      	add	r2, r1
     472:	242d      	movs	r4, #45	; 0x2d
     474:	f802 4c10 	strb.w	r4, [r2, #-16]
     478:	3101      	adds	r1, #1
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
     47a:	b158      	cbz	r0, 494 <UARTvprintf+0x184>
                    {
                        pcBuf[ui32Pos++] =
                            g_pcHex[(ui32Value / ui32Idx) % ui32Base];
     47c:	fbbc f2f0 	udiv	r2, ip, r0
     480:	fbb2 f4f3 	udiv	r4, r2, r3
     484:	fb03 2214 	mls	r2, r3, r4, r2
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32Idx; ui32Idx /= ui32Base)
     488:	fbb0 f0f3 	udiv	r0, r0, r3
                    {
                        pcBuf[ui32Pos++] =
     48c:	f812 2008 	ldrb.w	r2, [r2, r8]
     490:	547a      	strb	r2, [r7, r1]
     492:	e7f1      	b.n	478 <UARTvprintf+0x168>
                    }

                    //
                    // Write the string.
                    //
                    UARTwrite(pcBuf, ui32Pos);
     494:	4638      	mov	r0, r7
     496:	f7ff ff19 	bl	2cc <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
     49a:	e004      	b.n	4a6 <UARTvprintf+0x196>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UARTwrite("ERROR", 5);
     49c:	4805      	ldr	r0, [pc, #20]	; (4b4 <UARTvprintf+0x1a4>)
     49e:	2105      	movs	r1, #5
     4a0:	f7ff ff14 	bl	2cc <UARTwrite>

                    //
                    // This command has been handled.
                    //
                    break;
     4a4:	46a1      	mov	r9, r4
                    UARTwrite(pcString - 1, 1);

                    //
                    // This command has been handled.
                    //
                    break;
     4a6:	464c      	mov	r4, r9
     4a8:	e73a      	b.n	320 <UARTvprintf+0x10>
                    break;
                }
            }
        }
    }
}
     4aa:	b007      	add	sp, #28
     4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     4b0:	00001088 	.word	0x00001088
     4b4:	0000109b 	.word	0x0000109b
     4b8:	0000108a 	.word	0x0000108a

000004bc <UARTprintf>:
//! \return None.
//
//*****************************************************************************
void
UARTprintf(const char *pcString, ...)
{
     4bc:	b40f      	push	{r0, r1, r2, r3}
     4be:	b507      	push	{r0, r1, r2, lr}
     4c0:	a904      	add	r1, sp, #16
     4c2:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list vaArgP;

    //
    // Start the varargs processing.
    //
    va_start(vaArgP, pcString);
     4c6:	9101      	str	r1, [sp, #4]

    UARTvprintf(pcString, vaArgP);
     4c8:	f7ff ff22 	bl	310 <UARTvprintf>

    //
    // We're finished with the varargs now.
    //
    va_end(vaArgP);
}
     4cc:	b003      	add	sp, #12
     4ce:	f85d eb04 	ldr.w	lr, [sp], #4
     4d2:	b004      	add	sp, #16
     4d4:	4770      	bx	lr
	...

000004d8 <DebugOut>:
static char debugCtr = 0;

void DebugOut(void)
{
    // Print Data  
    printf("%.2F\r\n", thermocouple_temp);
     4d8:	4b0f      	ldr	r3, [pc, #60]	; (518 <DebugOut+0x40>)


static char debugCtr = 0;

void DebugOut(void)
{
     4da:	b510      	push	{r4, lr}
    // Print Data  
    printf("%.2F\r\n", thermocouple_temp);
     4dc:	6818      	ldr	r0, [r3, #0]
    //printf("%i\r\n", (thermocouple >> 18) & 0x1FFF);

    // Heartbeat
    if (debugCtr == 4)
     4de:	4c0f      	ldr	r4, [pc, #60]	; (51c <DebugOut+0x44>)
static char debugCtr = 0;

void DebugOut(void)
{
    // Print Data  
    printf("%.2F\r\n", thermocouple_temp);
     4e0:	f000 faec 	bl	abc <__aeabi_f2d>
     4e4:	4602      	mov	r2, r0
     4e6:	460b      	mov	r3, r1
     4e8:	480d      	ldr	r0, [pc, #52]	; (520 <DebugOut+0x48>)
     4ea:	f7ff ffe7 	bl	4bc <UARTprintf>
    //printf("%i\r\n", (thermocouple >> 18) & 0x1FFF);

    // Heartbeat
    if (debugCtr == 4)
     4ee:	7823      	ldrb	r3, [r4, #0]
     4f0:	2b04      	cmp	r3, #4
     4f2:	d10c      	bne.n	50e <DebugOut+0x36>
    {
      GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, ~(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_1)));
     4f4:	2102      	movs	r1, #2
     4f6:	480b      	ldr	r0, [pc, #44]	; (524 <DebugOut+0x4c>)
     4f8:	f000 fbb1 	bl	c5e <GPIOPinRead>
     4fc:	43c2      	mvns	r2, r0
     4fe:	2102      	movs	r1, #2
     500:	4808      	ldr	r0, [pc, #32]	; (524 <DebugOut+0x4c>)
     502:	b2d2      	uxtb	r2, r2
     504:	f000 fbae 	bl	c64 <GPIOPinWrite>
      debugCtr -= 5;
     508:	7823      	ldrb	r3, [r4, #0]
     50a:	3b05      	subs	r3, #5
     50c:	7023      	strb	r3, [r4, #0]
    }

    debugCtr++;
     50e:	7823      	ldrb	r3, [r4, #0]
     510:	3301      	adds	r3, #1
     512:	7023      	strb	r3, [r4, #0]
     514:	bd10      	pop	{r4, pc}
     516:	bf00      	nop
     518:	20000018 	.word	0x20000018
     51c:	20000004 	.word	0x20000004
     520:	000010b0 	.word	0x000010b0
     524:	40025000 	.word	0x40025000

00000528 <Timer0AIntHandler>:
void (*Timer0AHandler)(void) = 0;
void (*SysTickHandler)(void) = 0;


void Timer0AIntHandler(void)
{
     528:	b508      	push	{r3, lr}
    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
     52a:	4804      	ldr	r0, [pc, #16]	; (53c <Timer0AIntHandler+0x14>)
     52c:	2101      	movs	r1, #1
     52e:	f000 fd9d 	bl	106c <TimerIntClear>
    Timer0AHandler();
     532:	4b03      	ldr	r3, [pc, #12]	; (540 <Timer0AIntHandler+0x18>)
     534:	681b      	ldr	r3, [r3, #0]
     536:	4798      	blx	r3
     538:	bd08      	pop	{r3, pc}
     53a:	bf00      	nop
     53c:	40030000 	.word	0x40030000
     540:	2000000c 	.word	0x2000000c

00000544 <SysTickIntHandler>:
}


void SysTickIntHandler(void){
     544:	b508      	push	{r3, lr}
    SysTickHandler();
     546:	4b02      	ldr	r3, [pc, #8]	; (550 <SysTickIntHandler+0xc>)
     548:	681b      	ldr	r3, [r3, #0]
     54a:	4798      	blx	r3
     54c:	bd08      	pop	{r3, pc}
     54e:	bf00      	nop
     550:	20000014 	.word	0x20000014

00000554 <readThermocouple>:

static float internal_temp;
static float thermocouple_temp;

void readThermocouple()
{
     554:	b537      	push	{r0, r1, r2, r4, r5, lr}
        
    // Toggle CS
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_3, OFF);
    
    // "Clock" bus to get data in
    SSIDataPut(SSI0_BASE, 0);
     556:	4c2a      	ldr	r4, [pc, #168]	; (600 <readThermocouple+0xac>)
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple = tmp << 24;
     558:	4d2a      	ldr	r5, [pc, #168]	; (604 <readThermocouple+0xb0>)
void readThermocouple()
{
    unsigned long tmp;
        
    // Toggle CS
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_3, OFF);
     55a:	2200      	movs	r2, #0
     55c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     560:	2108      	movs	r1, #8
     562:	f000 fb7f 	bl	c64 <GPIOPinWrite>
    
    // "Clock" bus to get data in
    SSIDataPut(SSI0_BASE, 0);
     566:	4620      	mov	r0, r4
     568:	2100      	movs	r1, #0
     56a:	f000 fc2d 	bl	dc8 <SSIDataPut>
    SSIDataGet(SSI0_BASE, &tmp);
     56e:	4620      	mov	r0, r4
     570:	a901      	add	r1, sp, #4
     572:	f000 fc2e 	bl	dd2 <SSIDataGet>
    thermocouple = tmp << 24;
     576:	9b01      	ldr	r3, [sp, #4]
    
    SSIDataPut(SSI0_BASE, 0);
     578:	4620      	mov	r0, r4
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_3, OFF);
    
    // "Clock" bus to get data in
    SSIDataPut(SSI0_BASE, 0);
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple = tmp << 24;
     57a:	061b      	lsls	r3, r3, #24
    
    SSIDataPut(SSI0_BASE, 0);
     57c:	2100      	movs	r1, #0
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_3, OFF);
    
    // "Clock" bus to get data in
    SSIDataPut(SSI0_BASE, 0);
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple = tmp << 24;
     57e:	602b      	str	r3, [r5, #0]
    
    SSIDataPut(SSI0_BASE, 0);
     580:	f000 fc22 	bl	dc8 <SSIDataPut>
    SSIDataGet(SSI0_BASE, &tmp);
     584:	4620      	mov	r0, r4
     586:	a901      	add	r1, sp, #4
     588:	f000 fc23 	bl	dd2 <SSIDataGet>
    thermocouple |= tmp << 16;
     58c:	9a01      	ldr	r2, [sp, #4]
     58e:	682b      	ldr	r3, [r5, #0]
    
    SSIDataPut(SSI0_BASE, 0);
     590:	4620      	mov	r0, r4
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple = tmp << 24;
    
    SSIDataPut(SSI0_BASE, 0);
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple |= tmp << 16;
     592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    
    SSIDataPut(SSI0_BASE, 0);
     596:	2100      	movs	r1, #0
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple = tmp << 24;
    
    SSIDataPut(SSI0_BASE, 0);
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple |= tmp << 16;
     598:	602b      	str	r3, [r5, #0]
    
    SSIDataPut(SSI0_BASE, 0);
     59a:	f000 fc15 	bl	dc8 <SSIDataPut>
    SSIDataGet(SSI0_BASE, &tmp);
     59e:	4620      	mov	r0, r4
     5a0:	a901      	add	r1, sp, #4
     5a2:	f000 fc16 	bl	dd2 <SSIDataGet>
    thermocouple |= tmp << 8;
     5a6:	9a01      	ldr	r2, [sp, #4]
     5a8:	682b      	ldr	r3, [r5, #0]
    
    SSIDataPut(SSI0_BASE, 0);
     5aa:	4620      	mov	r0, r4
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple |= tmp << 16;
    
    SSIDataPut(SSI0_BASE, 0);
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple |= tmp << 8;
     5ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    
    SSIDataPut(SSI0_BASE, 0);
     5b0:	2100      	movs	r1, #0
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple |= tmp << 16;
    
    SSIDataPut(SSI0_BASE, 0);
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple |= tmp << 8;
     5b2:	602b      	str	r3, [r5, #0]
    
    SSIDataPut(SSI0_BASE, 0);
     5b4:	f000 fc08 	bl	dc8 <SSIDataPut>
    SSIDataGet(SSI0_BASE, &tmp);
     5b8:	4620      	mov	r0, r4
     5ba:	a901      	add	r1, sp, #4
     5bc:	f000 fc09 	bl	dd2 <SSIDataGet>
    thermocouple |= tmp << 0;
     5c0:	682a      	ldr	r2, [r5, #0]
     5c2:	9b01      	ldr	r3, [sp, #4]

    // Toggle CS
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_3, ON);
     5c4:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple |= tmp << 8;
    
    SSIDataPut(SSI0_BASE, 0);
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple |= tmp << 0;
     5c8:	4313      	orrs	r3, r2

    // Toggle CS
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_3, ON);
     5ca:	2108      	movs	r1, #8
     5cc:	22ff      	movs	r2, #255	; 0xff
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple |= tmp << 8;
    
    SSIDataPut(SSI0_BASE, 0);
    SSIDataGet(SSI0_BASE, &tmp);
    thermocouple |= tmp << 0;
     5ce:	602b      	str	r3, [r5, #0]

    // Toggle CS
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_3, ON);
     5d0:	f000 fb48 	bl	c64 <GPIOPinWrite>

   
    // Convert to proper precision
    internal_temp = ((float) ((thermocouple >> 4) & 0x7FF)) *.0625;
     5d4:	682b      	ldr	r3, [r5, #0]
     5d6:	f3c3 120a 	ubfx	r2, r3, #4, #11
     5da:	ee07 2a90 	vmov	s15, r2
     5de:	4a0a      	ldr	r2, [pc, #40]	; (608 <readThermocouple+0xb4>)
     5e0:	eefa 7ace 	vcvt.f32.s32	s15, s15, #4
    thermocouple_temp = ((float) ((thermocouple >> 18) & 0x1FFF)) * 0.25;
     5e4:	f3c3 438c 	ubfx	r3, r3, #18, #13
    // Toggle CS
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_3, ON);

   
    // Convert to proper precision
    internal_temp = ((float) ((thermocouple >> 4) & 0x7FF)) *.0625;
     5e8:	edc2 7a00 	vstr	s15, [r2]
    thermocouple_temp = ((float) ((thermocouple >> 18) & 0x1FFF)) * 0.25;
     5ec:	ee07 3a90 	vmov	s15, r3
     5f0:	4b06      	ldr	r3, [pc, #24]	; (60c <readThermocouple+0xb8>)
     5f2:	eefa 7acf 	vcvt.f32.s32	s15, s15, #2
     5f6:	edc3 7a00 	vstr	s15, [r3]
}
     5fa:	b003      	add	sp, #12
     5fc:	bd30      	pop	{r4, r5, pc}
     5fe:	bf00      	nop
     600:	40008000 	.word	0x40008000
     604:	20000008 	.word	0x20000008
     608:	20000010 	.word	0x20000010
     60c:	20000018 	.word	0x20000018

00000610 <ControlOven>:



void ControlOven(void)
{
  readThermocouple();
     610:	f7ff bfa0 	b.w	554 <readThermocouple>

00000614 <main>:
}



int main(void)
{
     614:	b507      	push	{r0, r1, r2, lr}
    // Clock
    SysCtlClockSet(SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_XTAL_16MHZ | SYSCTL_OSC_MAIN);
     616:	4850      	ldr	r0, [pc, #320]	; (758 <main+0x144>)
     618:	f000 fbf8 	bl	e0c <SysCtlClockSet>
    
    
    // GPIO
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
     61c:	484f      	ldr	r0, [pc, #316]	; (75c <main+0x148>)
     61e:	f000 fbdf 	bl	de0 <SysCtlPeripheralEnable>
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2);
     622:	484f      	ldr	r0, [pc, #316]	; (760 <main+0x14c>)
     624:	2106      	movs	r1, #6
     626:	f000 fb20 	bl	c6a <GPIOPinTypeGPIOOutput>
    
    GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2, OFF);
     62a:	2200      	movs	r2, #0
     62c:	2106      	movs	r1, #6
     62e:	484c      	ldr	r0, [pc, #304]	; (760 <main+0x14c>)
     630:	f000 fb18 	bl	c64 <GPIOPinWrite>

    
    // UART
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
     634:	484b      	ldr	r0, [pc, #300]	; (764 <main+0x150>)
     636:	f000 fbd3 	bl	de0 <SysCtlPeripheralEnable>
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
     63a:	2103      	movs	r1, #3
     63c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     640:	f000 fb2f 	bl	ca2 <GPIOPinTypeUART>

    UARTStdioConfig(0, 921600, SysCtlClockGet());
     644:	f000 fc76 	bl	f34 <SysCtlClockGet>
     648:	f44f 2161 	mov.w	r1, #921600	; 0xe1000
     64c:	4602      	mov	r2, r0
     64e:	2000      	movs	r0, #0
     650:	f7ff fe0c 	bl	26c <UARTStdioConfig>

    
    // SPI
    SysCtlPeripheralEnable(SYSCTL_PERIPH_SSI0);
     654:	4844      	ldr	r0, [pc, #272]	; (768 <main+0x154>)
     656:	f000 fbc3 	bl	de0 <SysCtlPeripheralEnable>
    GPIOPinConfigure(GPIO_PA2_SSI0CLK);
     65a:	f640 0002 	movw	r0, #2050	; 0x802
     65e:	f000 fb2f 	bl	cc0 <GPIOPinConfigure>
    GPIOPinConfigure(GPIO_PA4_SSI0RX);
     662:	f241 0002 	movw	r0, #4098	; 0x1002
     666:	f000 fb2b 	bl	cc0 <GPIOPinConfigure>
    GPIOPinTypeSSI(GPIO_PORTA_BASE, GPIO_PIN_2 | GPIO_PIN_4);
     66a:	2114      	movs	r1, #20
     66c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     670:	f000 fb09 	bl	c86 <GPIOPinTypeSSI>
    SSIConfigSetExpClk(SSI0_BASE, SysCtlClockGet(), SSI_FRF_MOTO_MODE_0, SSI_MODE_MASTER, 1000000, 8);
     674:	f000 fc5e 	bl	f34 <SysCtlClockGet>
     678:	4b3c      	ldr	r3, [pc, #240]	; (76c <main+0x158>)
     67a:	2408      	movs	r4, #8
     67c:	2200      	movs	r2, #0
     67e:	4601      	mov	r1, r0
     680:	e88d 0018 	stmia.w	sp, {r3, r4}
     684:	483a      	ldr	r0, [pc, #232]	; (770 <main+0x15c>)
     686:	4613      	mov	r3, r2
     688:	f000 fb76 	bl	d78 <SSIConfigSetExpClk>

    // Manually Toggle CS (32 bit data)
    GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE, GPIO_PIN_3);
     68c:	4621      	mov	r1, r4
     68e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     692:	f000 faea 	bl	c6a <GPIOPinTypeGPIOOutput>
    GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_3, ON);
     696:	4621      	mov	r1, r4
     698:	22ff      	movs	r2, #255	; 0xff
     69a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
     69e:	f000 fae1 	bl	c64 <GPIOPinWrite>

    // MAX31855 Power
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
     6a2:	4834      	ldr	r0, [pc, #208]	; (774 <main+0x160>)
     6a4:	f000 fb9c 	bl	de0 <SysCtlPeripheralEnable>
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_7);
     6a8:	4833      	ldr	r0, [pc, #204]	; (778 <main+0x164>)
     6aa:	2180      	movs	r1, #128	; 0x80
     6ac:	f000 fadd 	bl	c6a <GPIOPinTypeGPIOOutput>
    GPIOPinWrite(GPIO_PORTB_BASE, GPIO_PIN_7, ON);
     6b0:	22ff      	movs	r2, #255	; 0xff
     6b2:	4831      	ldr	r0, [pc, #196]	; (778 <main+0x164>)
     6b4:	2180      	movs	r1, #128	; 0x80
     6b6:	f000 fad5 	bl	c64 <GPIOPinWrite>

    // MAX31855 GND
    GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_6);
     6ba:	482f      	ldr	r0, [pc, #188]	; (778 <main+0x164>)
     6bc:	2140      	movs	r1, #64	; 0x40
     6be:	f000 fad4 	bl	c6a <GPIOPinTypeGPIOOutput>
    GPIOPinWrite(GPIO_PORTB_BASE, GPIO_PIN_6, OFF);
     6c2:	2200      	movs	r2, #0
     6c4:	2140      	movs	r1, #64	; 0x40
     6c6:	482c      	ldr	r0, [pc, #176]	; (778 <main+0x164>)
     6c8:	f000 facc 	bl	c64 <GPIOPinWrite>

    SSIEnable(SSI0_BASE);
     6cc:	4828      	ldr	r0, [pc, #160]	; (770 <main+0x15c>)
     6ce:	f000 fb76 	bl	dbe <SSIEnable>


    // FPU
    FPUEnable();
     6d2:	f000 fa47 	bl	b64 <FPUEnable>


    // Timer
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
     6d6:	4829      	ldr	r0, [pc, #164]	; (77c <main+0x168>)
     6d8:	f000 fb82 	bl	de0 <SysCtlPeripheralEnable>
    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);
     6dc:	2122      	movs	r1, #34	; 0x22
     6de:	4828      	ldr	r0, [pc, #160]	; (780 <main+0x16c>)
     6e0:	f000 fca5 	bl	102e <TimerConfigure>
    TimerLoadSet(TIMER0_BASE, TIMER_A, SysCtlClockGet() / 100);
     6e4:	f000 fc26 	bl	f34 <SysCtlClockGet>
     6e8:	2264      	movs	r2, #100	; 0x64
     6ea:	fbb0 f2f2 	udiv	r2, r0, r2
     6ee:	21ff      	movs	r1, #255	; 0xff
     6f0:	4823      	ldr	r0, [pc, #140]	; (780 <main+0x16c>)
     6f2:	f000 fcae 	bl	1052 <TimerLoadSet>
    
    IntEnable(INT_TIMER0A);
     6f6:	2023      	movs	r0, #35	; 0x23
     6f8:	f000 fb0e 	bl	d18 <IntEnable>
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
     6fc:	4820      	ldr	r0, [pc, #128]	; (780 <main+0x16c>)
     6fe:	2101      	movs	r1, #1
     700:	f000 fcb0 	bl	1064 <TimerIntEnable>
    TimerEnable(TIMER0_BASE, TIMER_A);
     704:	21ff      	movs	r1, #255	; 0xff
     706:	481e      	ldr	r0, [pc, #120]	; (780 <main+0x16c>)
     708:	f000 fc8a 	bl	1020 <TimerEnable>

    Timer0AHandler = &ControlOven;
     70c:	4a1d      	ldr	r2, [pc, #116]	; (784 <main+0x170>)
     70e:	4b1e      	ldr	r3, [pc, #120]	; (788 <main+0x174>)
     710:	601a      	str	r2, [r3, #0]


    // Systick
    SysTickPeriodSet(SysCtlClockGet() / 10);
     712:	f000 fc0f 	bl	f34 <SysCtlClockGet>
     716:	230a      	movs	r3, #10
     718:	fbb0 f0f3 	udiv	r0, r0, r3
     71c:	f000 fc7a 	bl	1014 <SysTickPeriodSet>

    SysTickIntEnable();
     720:	f000 fc70 	bl	1004 <SysTickIntEnable>
    SysTickEnable();
     724:	f000 fc66 	bl	ff4 <SysTickEnable>

    SysTickHandler = &DebugOut;
     728:	4a18      	ldr	r2, [pc, #96]	; (78c <main+0x178>)
     72a:	4b19      	ldr	r3, [pc, #100]	; (790 <main+0x17c>)
     72c:	601a      	str	r2, [r3, #0]
    
    
    // Enable Interrupts
    IntMasterEnable();
     72e:	f000 faeb 	bl	d08 <IntMasterEnable>
        // Read Thermocouple
        //readThermocouple();


        // Delay for a bit
        SysCtlDelay(SysCtlClockGet() / 3);
     732:	2403      	movs	r4, #3
     734:	f000 fbfe 	bl	f34 <SysCtlClockGet>
     738:	fbb0 f0f4 	udiv	r0, r0, r4
     73c:	f000 fb62 	bl	e04 <SysCtlDelay>

      GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, ~(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_2)));
     740:	2104      	movs	r1, #4
     742:	4807      	ldr	r0, [pc, #28]	; (760 <main+0x14c>)
     744:	f000 fa8b 	bl	c5e <GPIOPinRead>
     748:	43c2      	mvns	r2, r0
     74a:	2104      	movs	r1, #4
     74c:	4804      	ldr	r0, [pc, #16]	; (760 <main+0x14c>)
     74e:	b2d2      	uxtb	r2, r2
     750:	f000 fa88 	bl	c64 <GPIOPinWrite>
     754:	e7ee      	b.n	734 <main+0x120>
     756:	bf00      	nop
     758:	c1000540 	.word	0xc1000540
     75c:	f0000805 	.word	0xf0000805
     760:	40025000 	.word	0x40025000
     764:	f0000800 	.word	0xf0000800
     768:	f0001c00 	.word	0xf0001c00
     76c:	000f4240 	.word	0x000f4240
     770:	40008000 	.word	0x40008000
     774:	f0000801 	.word	0xf0000801
     778:	40005000 	.word	0x40005000
     77c:	f0000400 	.word	0xf0000400
     780:	40030000 	.word	0x40030000
     784:	00000611 	.word	0x00000611
     788:	2000000c 	.word	0x2000000c
     78c:	000004d9 	.word	0x000004d9
     790:	20000014 	.word	0x20000014

00000794 <NmiSR>:
// by a debugger.
//
//*****************************************************************************
static void
NmiSR(void)
{
     794:	e7fe      	b.n	794 <NmiSR>

00000796 <FaultISR>:
// for examination by a debugger.
//
//*****************************************************************************
static void
FaultISR(void)
{
     796:	e7fe      	b.n	796 <FaultISR>

00000798 <IntDefaultHandler>:
// for examination by a debugger.
//
//*****************************************************************************
static void
IntDefaultHandler(void)
{
     798:	e7fe      	b.n	798 <IntDefaultHandler>
	...

0000079c <ResetISR>:
// application.
//
//*****************************************************************************
void
ResetISR(void)
{
     79c:	b510      	push	{r4, lr}
     79e:	4a0f      	ldr	r2, [pc, #60]	; (7dc <zero_loop+0x20>)

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pui32Src = &_etext;
    for(pui32Dest = &_data; pui32Dest < &_edata; )
     7a0:	480f      	ldr	r0, [pc, #60]	; (7e0 <zero_loop+0x24>)
    {
        *pui32Dest++ = *pui32Src++;
     7a2:	4c10      	ldr	r4, [pc, #64]	; (7e4 <zero_loop+0x28>)

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pui32Src = &_etext;
    for(pui32Dest = &_data; pui32Dest < &_edata; )
     7a4:	2300      	movs	r3, #0
     7a6:	1899      	adds	r1, r3, r2
     7a8:	4281      	cmp	r1, r0
     7aa:	d203      	bcs.n	7b4 <ResetISR+0x18>
    {
        *pui32Dest++ = *pui32Src++;
     7ac:	5919      	ldr	r1, [r3, r4]
     7ae:	5099      	str	r1, [r3, r2]
     7b0:	3304      	adds	r3, #4
     7b2:	e7f8      	b.n	7a6 <ResetISR+0xa>
    }

    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_bss\n"
     7b4:	480d      	ldr	r0, [pc, #52]	; (7ec <zero_loop+0x30>)
     7b6:	490e      	ldr	r1, [pc, #56]	; (7f0 <zero_loop+0x34>)
     7b8:	f04f 0200 	mov.w	r2, #0

000007bc <zero_loop>:
     7bc:	4288      	cmp	r0, r1
     7be:	bfb8      	it	lt
     7c0:	f840 2b04 	strlt.w	r2, [r0], #4
     7c4:	f6ff affa 	blt.w	7bc <zero_loop>
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
     7c8:	4b07      	ldr	r3, [pc, #28]	; (7e8 <zero_loop+0x2c>)
     7ca:	681a      	ldr	r2, [r3, #0]
                         ~(NVIC_CPAC_CP10_M | NVIC_CPAC_CP11_M)) |
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);
     7cc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    // APIs must be done here prior to the floating-point unit being enabled.
    //
    // Note that this does not use DriverLib since it might not be included in
    // this project.
    //
    HWREG(NVIC_CPAC) = ((HWREG(NVIC_CPAC) &
     7d0:	601a      	str	r2, [r3, #0]

    //
    // Call the application's entry point.
    //
    main();
}
     7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                        NVIC_CPAC_CP10_FULL | NVIC_CPAC_CP11_FULL);

    //
    // Call the application's entry point.
    //
    main();
     7d6:	f7ff bf1d 	b.w	614 <main>
     7da:	bf00      	nop
     7dc:	20000000 	.word	0x20000000
     7e0:	20000000 	.word	0x20000000
     7e4:	000011b0 	.word	0x000011b0
     7e8:	e000ed88 	.word	0xe000ed88
     7ec:	20000000 	.word	0x20000000
     7f0:	2000011c 	.word	0x2000011c

000007f4 <__aeabi_drsub>:
     7f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7f8:	e002      	b.n	800 <__adddf3>
     7fa:	bf00      	nop

000007fc <__aeabi_dsub>:
     7fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000800 <__adddf3>:
     800:	b530      	push	{r4, r5, lr}
     802:	ea4f 0441 	mov.w	r4, r1, lsl #1
     806:	ea4f 0543 	mov.w	r5, r3, lsl #1
     80a:	ea94 0f05 	teq	r4, r5
     80e:	bf08      	it	eq
     810:	ea90 0f02 	teqeq	r0, r2
     814:	bf1f      	itttt	ne
     816:	ea54 0c00 	orrsne.w	ip, r4, r0
     81a:	ea55 0c02 	orrsne.w	ip, r5, r2
     81e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     822:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     826:	f000 80e2 	beq.w	9ee <__adddf3+0x1ee>
     82a:	ea4f 5454 	mov.w	r4, r4, lsr #21
     82e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     832:	bfb8      	it	lt
     834:	426d      	neglt	r5, r5
     836:	dd0c      	ble.n	852 <__adddf3+0x52>
     838:	442c      	add	r4, r5
     83a:	ea80 0202 	eor.w	r2, r0, r2
     83e:	ea81 0303 	eor.w	r3, r1, r3
     842:	ea82 0000 	eor.w	r0, r2, r0
     846:	ea83 0101 	eor.w	r1, r3, r1
     84a:	ea80 0202 	eor.w	r2, r0, r2
     84e:	ea81 0303 	eor.w	r3, r1, r3
     852:	2d36      	cmp	r5, #54	; 0x36
     854:	bf88      	it	hi
     856:	bd30      	pophi	{r4, r5, pc}
     858:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     85c:	ea4f 3101 	mov.w	r1, r1, lsl #12
     860:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     864:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     868:	d002      	beq.n	870 <__adddf3+0x70>
     86a:	4240      	negs	r0, r0
     86c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     870:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     874:	ea4f 3303 	mov.w	r3, r3, lsl #12
     878:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     87c:	d002      	beq.n	884 <__adddf3+0x84>
     87e:	4252      	negs	r2, r2
     880:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     884:	ea94 0f05 	teq	r4, r5
     888:	f000 80a7 	beq.w	9da <__adddf3+0x1da>
     88c:	f1a4 0401 	sub.w	r4, r4, #1
     890:	f1d5 0e20 	rsbs	lr, r5, #32
     894:	db0d      	blt.n	8b2 <__adddf3+0xb2>
     896:	fa02 fc0e 	lsl.w	ip, r2, lr
     89a:	fa22 f205 	lsr.w	r2, r2, r5
     89e:	1880      	adds	r0, r0, r2
     8a0:	f141 0100 	adc.w	r1, r1, #0
     8a4:	fa03 f20e 	lsl.w	r2, r3, lr
     8a8:	1880      	adds	r0, r0, r2
     8aa:	fa43 f305 	asr.w	r3, r3, r5
     8ae:	4159      	adcs	r1, r3
     8b0:	e00e      	b.n	8d0 <__adddf3+0xd0>
     8b2:	f1a5 0520 	sub.w	r5, r5, #32
     8b6:	f10e 0e20 	add.w	lr, lr, #32
     8ba:	2a01      	cmp	r2, #1
     8bc:	fa03 fc0e 	lsl.w	ip, r3, lr
     8c0:	bf28      	it	cs
     8c2:	f04c 0c02 	orrcs.w	ip, ip, #2
     8c6:	fa43 f305 	asr.w	r3, r3, r5
     8ca:	18c0      	adds	r0, r0, r3
     8cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8d4:	d507      	bpl.n	8e6 <__adddf3+0xe6>
     8d6:	f04f 0e00 	mov.w	lr, #0
     8da:	f1dc 0c00 	rsbs	ip, ip, #0
     8de:	eb7e 0000 	sbcs.w	r0, lr, r0
     8e2:	eb6e 0101 	sbc.w	r1, lr, r1
     8e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8ea:	d31b      	bcc.n	924 <__adddf3+0x124>
     8ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8f0:	d30c      	bcc.n	90c <__adddf3+0x10c>
     8f2:	0849      	lsrs	r1, r1, #1
     8f4:	ea5f 0030 	movs.w	r0, r0, rrx
     8f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
     8fc:	f104 0401 	add.w	r4, r4, #1
     900:	ea4f 5244 	mov.w	r2, r4, lsl #21
     904:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     908:	f080 809a 	bcs.w	a40 <__adddf3+0x240>
     90c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     910:	bf08      	it	eq
     912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     916:	f150 0000 	adcs.w	r0, r0, #0
     91a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     91e:	ea41 0105 	orr.w	r1, r1, r5
     922:	bd30      	pop	{r4, r5, pc}
     924:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     928:	4140      	adcs	r0, r0
     92a:	eb41 0101 	adc.w	r1, r1, r1
     92e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     932:	f1a4 0401 	sub.w	r4, r4, #1
     936:	d1e9      	bne.n	90c <__adddf3+0x10c>
     938:	f091 0f00 	teq	r1, #0
     93c:	bf04      	itt	eq
     93e:	4601      	moveq	r1, r0
     940:	2000      	moveq	r0, #0
     942:	fab1 f381 	clz	r3, r1
     946:	bf08      	it	eq
     948:	3320      	addeq	r3, #32
     94a:	f1a3 030b 	sub.w	r3, r3, #11
     94e:	f1b3 0220 	subs.w	r2, r3, #32
     952:	da0c      	bge.n	96e <__adddf3+0x16e>
     954:	320c      	adds	r2, #12
     956:	dd08      	ble.n	96a <__adddf3+0x16a>
     958:	f102 0c14 	add.w	ip, r2, #20
     95c:	f1c2 020c 	rsb	r2, r2, #12
     960:	fa01 f00c 	lsl.w	r0, r1, ip
     964:	fa21 f102 	lsr.w	r1, r1, r2
     968:	e00c      	b.n	984 <__adddf3+0x184>
     96a:	f102 0214 	add.w	r2, r2, #20
     96e:	bfd8      	it	le
     970:	f1c2 0c20 	rsble	ip, r2, #32
     974:	fa01 f102 	lsl.w	r1, r1, r2
     978:	fa20 fc0c 	lsr.w	ip, r0, ip
     97c:	bfdc      	itt	le
     97e:	ea41 010c 	orrle.w	r1, r1, ip
     982:	4090      	lslle	r0, r2
     984:	1ae4      	subs	r4, r4, r3
     986:	bfa2      	ittt	ge
     988:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     98c:	4329      	orrge	r1, r5
     98e:	bd30      	popge	{r4, r5, pc}
     990:	ea6f 0404 	mvn.w	r4, r4
     994:	3c1f      	subs	r4, #31
     996:	da1c      	bge.n	9d2 <__adddf3+0x1d2>
     998:	340c      	adds	r4, #12
     99a:	dc0e      	bgt.n	9ba <__adddf3+0x1ba>
     99c:	f104 0414 	add.w	r4, r4, #20
     9a0:	f1c4 0220 	rsb	r2, r4, #32
     9a4:	fa20 f004 	lsr.w	r0, r0, r4
     9a8:	fa01 f302 	lsl.w	r3, r1, r2
     9ac:	ea40 0003 	orr.w	r0, r0, r3
     9b0:	fa21 f304 	lsr.w	r3, r1, r4
     9b4:	ea45 0103 	orr.w	r1, r5, r3
     9b8:	bd30      	pop	{r4, r5, pc}
     9ba:	f1c4 040c 	rsb	r4, r4, #12
     9be:	f1c4 0220 	rsb	r2, r4, #32
     9c2:	fa20 f002 	lsr.w	r0, r0, r2
     9c6:	fa01 f304 	lsl.w	r3, r1, r4
     9ca:	ea40 0003 	orr.w	r0, r0, r3
     9ce:	4629      	mov	r1, r5
     9d0:	bd30      	pop	{r4, r5, pc}
     9d2:	fa21 f004 	lsr.w	r0, r1, r4
     9d6:	4629      	mov	r1, r5
     9d8:	bd30      	pop	{r4, r5, pc}
     9da:	f094 0f00 	teq	r4, #0
     9de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9e2:	bf06      	itte	eq
     9e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9e8:	3401      	addeq	r4, #1
     9ea:	3d01      	subne	r5, #1
     9ec:	e74e      	b.n	88c <__adddf3+0x8c>
     9ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9f2:	bf18      	it	ne
     9f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9f8:	d029      	beq.n	a4e <__adddf3+0x24e>
     9fa:	ea94 0f05 	teq	r4, r5
     9fe:	bf08      	it	eq
     a00:	ea90 0f02 	teqeq	r0, r2
     a04:	d005      	beq.n	a12 <__adddf3+0x212>
     a06:	ea54 0c00 	orrs.w	ip, r4, r0
     a0a:	bf04      	itt	eq
     a0c:	4619      	moveq	r1, r3
     a0e:	4610      	moveq	r0, r2
     a10:	bd30      	pop	{r4, r5, pc}
     a12:	ea91 0f03 	teq	r1, r3
     a16:	bf1e      	ittt	ne
     a18:	2100      	movne	r1, #0
     a1a:	2000      	movne	r0, #0
     a1c:	bd30      	popne	{r4, r5, pc}
     a1e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a22:	d105      	bne.n	a30 <__adddf3+0x230>
     a24:	0040      	lsls	r0, r0, #1
     a26:	4149      	adcs	r1, r1
     a28:	bf28      	it	cs
     a2a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a2e:	bd30      	pop	{r4, r5, pc}
     a30:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a34:	bf3c      	itt	cc
     a36:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a3a:	bd30      	popcc	{r4, r5, pc}
     a3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a40:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a48:	f04f 0000 	mov.w	r0, #0
     a4c:	bd30      	pop	{r4, r5, pc}
     a4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a52:	bf1a      	itte	ne
     a54:	4619      	movne	r1, r3
     a56:	4610      	movne	r0, r2
     a58:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a5c:	bf1c      	itt	ne
     a5e:	460b      	movne	r3, r1
     a60:	4602      	movne	r2, r0
     a62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a66:	bf06      	itte	eq
     a68:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a6c:	ea91 0f03 	teqeq	r1, r3
     a70:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a74:	bd30      	pop	{r4, r5, pc}
     a76:	bf00      	nop

00000a78 <__aeabi_ui2d>:
     a78:	f090 0f00 	teq	r0, #0
     a7c:	bf04      	itt	eq
     a7e:	2100      	moveq	r1, #0
     a80:	4770      	bxeq	lr
     a82:	b530      	push	{r4, r5, lr}
     a84:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a88:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a8c:	f04f 0500 	mov.w	r5, #0
     a90:	f04f 0100 	mov.w	r1, #0
     a94:	e750      	b.n	938 <__adddf3+0x138>
     a96:	bf00      	nop

00000a98 <__aeabi_i2d>:
     a98:	f090 0f00 	teq	r0, #0
     a9c:	bf04      	itt	eq
     a9e:	2100      	moveq	r1, #0
     aa0:	4770      	bxeq	lr
     aa2:	b530      	push	{r4, r5, lr}
     aa4:	f44f 6480 	mov.w	r4, #1024	; 0x400
     aa8:	f104 0432 	add.w	r4, r4, #50	; 0x32
     aac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     ab0:	bf48      	it	mi
     ab2:	4240      	negmi	r0, r0
     ab4:	f04f 0100 	mov.w	r1, #0
     ab8:	e73e      	b.n	938 <__adddf3+0x138>
     aba:	bf00      	nop

00000abc <__aeabi_f2d>:
     abc:	0042      	lsls	r2, r0, #1
     abe:	ea4f 01e2 	mov.w	r1, r2, asr #3
     ac2:	ea4f 0131 	mov.w	r1, r1, rrx
     ac6:	ea4f 7002 	mov.w	r0, r2, lsl #28
     aca:	bf1f      	itttt	ne
     acc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ad0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     ad4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     ad8:	4770      	bxne	lr
     ada:	f092 0f00 	teq	r2, #0
     ade:	bf14      	ite	ne
     ae0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     ae4:	4770      	bxeq	lr
     ae6:	b530      	push	{r4, r5, lr}
     ae8:	f44f 7460 	mov.w	r4, #896	; 0x380
     aec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     af0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     af4:	e720      	b.n	938 <__adddf3+0x138>
     af6:	bf00      	nop

00000af8 <__aeabi_ul2d>:
     af8:	ea50 0201 	orrs.w	r2, r0, r1
     afc:	bf08      	it	eq
     afe:	4770      	bxeq	lr
     b00:	b530      	push	{r4, r5, lr}
     b02:	f04f 0500 	mov.w	r5, #0
     b06:	e00a      	b.n	b1e <__aeabi_l2d+0x16>

00000b08 <__aeabi_l2d>:
     b08:	ea50 0201 	orrs.w	r2, r0, r1
     b0c:	bf08      	it	eq
     b0e:	4770      	bxeq	lr
     b10:	b530      	push	{r4, r5, lr}
     b12:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     b16:	d502      	bpl.n	b1e <__aeabi_l2d+0x16>
     b18:	4240      	negs	r0, r0
     b1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b1e:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b22:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b26:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b2a:	f43f aedc 	beq.w	8e6 <__adddf3+0xe6>
     b2e:	f04f 0203 	mov.w	r2, #3
     b32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b36:	bf18      	it	ne
     b38:	3203      	addne	r2, #3
     b3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b3e:	bf18      	it	ne
     b40:	3203      	addne	r2, #3
     b42:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b46:	f1c2 0320 	rsb	r3, r2, #32
     b4a:	fa00 fc03 	lsl.w	ip, r0, r3
     b4e:	fa20 f002 	lsr.w	r0, r0, r2
     b52:	fa01 fe03 	lsl.w	lr, r1, r3
     b56:	ea40 000e 	orr.w	r0, r0, lr
     b5a:	fa21 f102 	lsr.w	r1, r1, r2
     b5e:	4414      	add	r4, r2
     b60:	e6c1      	b.n	8e6 <__adddf3+0xe6>
     b62:	bf00      	nop

00000b64 <FPUEnable>:
     b64:	4b02      	ldr	r3, [pc, #8]	; (b70 <FPUEnable+0xc>)
     b66:	681a      	ldr	r2, [r3, #0]
     b68:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     b6c:	601a      	str	r2, [r3, #0]
     b6e:	4770      	bx	lr
     b70:	e000ed88 	.word	0xe000ed88

00000b74 <GPIODirModeSet>:
     b74:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
     b78:	f012 0f01 	tst.w	r2, #1
     b7c:	b510      	push	{r4, lr}
     b7e:	f500 6480 	add.w	r4, r0, #1024	; 0x400
     b82:	bf14      	ite	ne
     b84:	430b      	orrne	r3, r1
     b86:	438b      	biceq	r3, r1
     b88:	6023      	str	r3, [r4, #0]
     b8a:	f012 0f02 	tst.w	r2, #2
     b8e:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
     b92:	f500 6384 	add.w	r3, r0, #1056	; 0x420
     b96:	bf14      	ite	ne
     b98:	4311      	orrne	r1, r2
     b9a:	ea22 0101 	biceq.w	r1, r2, r1
     b9e:	6019      	str	r1, [r3, #0]
     ba0:	bd10      	pop	{r4, pc}

00000ba2 <GPIOPadConfigSet>:
     ba2:	b530      	push	{r4, r5, lr}
     ba4:	f8d0 4500 	ldr.w	r4, [r0, #1280]	; 0x500
     ba8:	f012 0f01 	tst.w	r2, #1
     bac:	f500 65a0 	add.w	r5, r0, #1280	; 0x500
     bb0:	bf14      	ite	ne
     bb2:	430c      	orrne	r4, r1
     bb4:	438c      	biceq	r4, r1
     bb6:	602c      	str	r4, [r5, #0]
     bb8:	f8d0 4504 	ldr.w	r4, [r0, #1284]	; 0x504
     bbc:	f012 0f02 	tst.w	r2, #2
     bc0:	f200 5504 	addw	r5, r0, #1284	; 0x504
     bc4:	bf14      	ite	ne
     bc6:	430c      	orrne	r4, r1
     bc8:	438c      	biceq	r4, r1
     bca:	602c      	str	r4, [r5, #0]
     bcc:	f8d0 4508 	ldr.w	r4, [r0, #1288]	; 0x508
     bd0:	f012 0f04 	tst.w	r2, #4
     bd4:	f500 65a1 	add.w	r5, r0, #1288	; 0x508
     bd8:	bf14      	ite	ne
     bda:	430c      	orrne	r4, r1
     bdc:	438c      	biceq	r4, r1
     bde:	602c      	str	r4, [r5, #0]
     be0:	f012 0f08 	tst.w	r2, #8
     be4:	f8d0 2518 	ldr.w	r2, [r0, #1304]	; 0x518
     be8:	f500 64a3 	add.w	r4, r0, #1304	; 0x518
     bec:	bf14      	ite	ne
     bee:	430a      	orrne	r2, r1
     bf0:	438a      	biceq	r2, r1
     bf2:	6022      	str	r2, [r4, #0]
     bf4:	f8d0 250c 	ldr.w	r2, [r0, #1292]	; 0x50c
     bf8:	f013 0f01 	tst.w	r3, #1
     bfc:	f200 540c 	addw	r4, r0, #1292	; 0x50c
     c00:	bf14      	ite	ne
     c02:	430a      	orrne	r2, r1
     c04:	438a      	biceq	r2, r1
     c06:	6022      	str	r2, [r4, #0]
     c08:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
     c0c:	f013 0f02 	tst.w	r3, #2
     c10:	f500 64a2 	add.w	r4, r0, #1296	; 0x510
     c14:	bf14      	ite	ne
     c16:	430a      	orrne	r2, r1
     c18:	438a      	biceq	r2, r1
     c1a:	6022      	str	r2, [r4, #0]
     c1c:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
     c20:	f013 0f04 	tst.w	r3, #4
     c24:	f200 5414 	addw	r4, r0, #1300	; 0x514
     c28:	bf14      	ite	ne
     c2a:	430a      	orrne	r2, r1
     c2c:	438a      	biceq	r2, r1
     c2e:	6022      	str	r2, [r4, #0]
     c30:	f8d0 251c 	ldr.w	r2, [r0, #1308]	; 0x51c
     c34:	f013 0f08 	tst.w	r3, #8
     c38:	f200 541c 	addw	r4, r0, #1308	; 0x51c
     c3c:	bf14      	ite	ne
     c3e:	430a      	orrne	r2, r1
     c40:	438a      	biceq	r2, r1
     c42:	6022      	str	r2, [r4, #0]
     c44:	f500 62a5 	add.w	r2, r0, #1320	; 0x528
     c48:	b91b      	cbnz	r3, c52 <GPIOPadConfigSet+0xb0>
     c4a:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
     c4e:	4319      	orrs	r1, r3
     c50:	e003      	b.n	c5a <GPIOPadConfigSet+0xb8>
     c52:	f8d0 3528 	ldr.w	r3, [r0, #1320]	; 0x528
     c56:	ea23 0101 	bic.w	r1, r3, r1
     c5a:	6011      	str	r1, [r2, #0]
     c5c:	bd30      	pop	{r4, r5, pc}

00000c5e <GPIOPinRead>:
     c5e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
     c62:	4770      	bx	lr

00000c64 <GPIOPinWrite>:
     c64:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
     c68:	4770      	bx	lr

00000c6a <GPIOPinTypeGPIOOutput>:
     c6a:	b538      	push	{r3, r4, r5, lr}
     c6c:	2201      	movs	r2, #1
     c6e:	4605      	mov	r5, r0
     c70:	460c      	mov	r4, r1
     c72:	2308      	movs	r3, #8
     c74:	f7ff ff95 	bl	ba2 <GPIOPadConfigSet>
     c78:	4628      	mov	r0, r5
     c7a:	4621      	mov	r1, r4
     c7c:	2201      	movs	r2, #1
     c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     c82:	f7ff bf77 	b.w	b74 <GPIODirModeSet>

00000c86 <GPIOPinTypeSSI>:
     c86:	b570      	push	{r4, r5, r6, lr}
     c88:	2202      	movs	r2, #2
     c8a:	4605      	mov	r5, r0
     c8c:	460c      	mov	r4, r1
     c8e:	f7ff ff71 	bl	b74 <GPIODirModeSet>
     c92:	4628      	mov	r0, r5
     c94:	4621      	mov	r1, r4
     c96:	2201      	movs	r2, #1
     c98:	2308      	movs	r3, #8
     c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     c9e:	f7ff bf80 	b.w	ba2 <GPIOPadConfigSet>

00000ca2 <GPIOPinTypeUART>:
     ca2:	b570      	push	{r4, r5, r6, lr}
     ca4:	2202      	movs	r2, #2
     ca6:	4605      	mov	r5, r0
     ca8:	460c      	mov	r4, r1
     caa:	f7ff ff63 	bl	b74 <GPIODirModeSet>
     cae:	4628      	mov	r0, r5
     cb0:	4621      	mov	r1, r4
     cb2:	2201      	movs	r2, #1
     cb4:	2308      	movs	r3, #8
     cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     cba:	f7ff bf72 	b.w	ba2 <GPIOPadConfigSet>
	...

00000cc0 <GPIOPinConfigure>:
     cc0:	4b0f      	ldr	r3, [pc, #60]	; (d00 <GPIOPinConfigure+0x40>)
     cc2:	f3c0 4207 	ubfx	r2, r0, #16, #8
     cc6:	681b      	ldr	r3, [r3, #0]
     cc8:	2101      	movs	r1, #1
     cca:	4091      	lsls	r1, r2
     ccc:	4219      	tst	r1, r3
     cce:	ea4f 0242 	mov.w	r2, r2, lsl #1
     cd2:	bf18      	it	ne
     cd4:	3201      	addne	r2, #1
     cd6:	4b0b      	ldr	r3, [pc, #44]	; (d04 <GPIOPinConfigure+0x44>)
     cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     cdc:	b510      	push	{r4, lr}
     cde:	f3c0 2207 	ubfx	r2, r0, #8, #8
     ce2:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
     ce6:	210f      	movs	r1, #15
     ce8:	4091      	lsls	r1, r2
     cea:	f000 000f 	and.w	r0, r0, #15
     cee:	ea24 0101 	bic.w	r1, r4, r1
     cf2:	fa00 f202 	lsl.w	r2, r0, r2
     cf6:	430a      	orrs	r2, r1
     cf8:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
     cfc:	bd10      	pop	{r4, pc}
     cfe:	bf00      	nop
     d00:	400fe06c 	.word	0x400fe06c
     d04:	000010b8 	.word	0x000010b8

00000d08 <IntMasterEnable>:
     d08:	b508      	push	{r3, lr}
     d0a:	f000 f9b1 	bl	1070 <CPUcpsie>
     d0e:	3000      	adds	r0, #0
     d10:	bf18      	it	ne
     d12:	2001      	movne	r0, #1
     d14:	bd08      	pop	{r3, pc}
	...

00000d18 <IntEnable>:
     d18:	2804      	cmp	r0, #4
     d1a:	d104      	bne.n	d26 <IntEnable+0xe>
     d1c:	4b13      	ldr	r3, [pc, #76]	; (d6c <IntEnable+0x54>)
     d1e:	681a      	ldr	r2, [r3, #0]
     d20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     d24:	e005      	b.n	d32 <IntEnable+0x1a>
     d26:	2805      	cmp	r0, #5
     d28:	d105      	bne.n	d36 <IntEnable+0x1e>
     d2a:	4b10      	ldr	r3, [pc, #64]	; (d6c <IntEnable+0x54>)
     d2c:	681a      	ldr	r2, [r3, #0]
     d2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
     d32:	601a      	str	r2, [r3, #0]
     d34:	4770      	bx	lr
     d36:	2806      	cmp	r0, #6
     d38:	d104      	bne.n	d44 <IntEnable+0x2c>
     d3a:	4b0c      	ldr	r3, [pc, #48]	; (d6c <IntEnable+0x54>)
     d3c:	681a      	ldr	r2, [r3, #0]
     d3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
     d42:	e7f6      	b.n	d32 <IntEnable+0x1a>
     d44:	280f      	cmp	r0, #15
     d46:	d104      	bne.n	d52 <IntEnable+0x3a>
     d48:	4b09      	ldr	r3, [pc, #36]	; (d70 <IntEnable+0x58>)
     d4a:	681a      	ldr	r2, [r3, #0]
     d4c:	f042 0202 	orr.w	r2, r2, #2
     d50:	e7ef      	b.n	d32 <IntEnable+0x1a>
     d52:	d90a      	bls.n	d6a <IntEnable+0x52>
     d54:	3810      	subs	r0, #16
     d56:	0942      	lsrs	r2, r0, #5
     d58:	4b06      	ldr	r3, [pc, #24]	; (d74 <IntEnable+0x5c>)
     d5a:	f000 001f 	and.w	r0, r0, #31
     d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     d62:	2201      	movs	r2, #1
     d64:	fa02 f000 	lsl.w	r0, r2, r0
     d68:	6018      	str	r0, [r3, #0]
     d6a:	4770      	bx	lr
     d6c:	e000ed24 	.word	0xe000ed24
     d70:	e000e010 	.word	0xe000e010
     d74:	00001130 	.word	0x00001130

00000d78 <SSIConfigSetExpClk>:
     d78:	2b02      	cmp	r3, #2
     d7a:	b510      	push	{r4, lr}
     d7c:	d002      	beq.n	d84 <SSIConfigSetExpClk+0xc>
     d7e:	b123      	cbz	r3, d8a <SSIConfigSetExpClk+0x12>
     d80:	2300      	movs	r3, #0
     d82:	e000      	b.n	d86 <SSIConfigSetExpClk+0xe>
     d84:	2308      	movs	r3, #8
     d86:	2404      	movs	r4, #4
     d88:	e000      	b.n	d8c <SSIConfigSetExpClk+0x14>
     d8a:	461c      	mov	r4, r3
     d8c:	4323      	orrs	r3, r4
     d8e:	6043      	str	r3, [r0, #4]
     d90:	9b02      	ldr	r3, [sp, #8]
     d92:	fbb1 f1f3 	udiv	r1, r1, r3
     d96:	2300      	movs	r3, #0
     d98:	3302      	adds	r3, #2
     d9a:	fbb1 f4f3 	udiv	r4, r1, r3
     d9e:	3c01      	subs	r4, #1
     da0:	2cff      	cmp	r4, #255	; 0xff
     da2:	d8f9      	bhi.n	d98 <SSIConfigSetExpClk+0x20>
     da4:	6103      	str	r3, [r0, #16]
     da6:	9b03      	ldr	r3, [sp, #12]
     da8:	f002 0130 	and.w	r1, r2, #48	; 0x30
     dac:	3b01      	subs	r3, #1
     dae:	0192      	lsls	r2, r2, #6
     db0:	430b      	orrs	r3, r1
     db2:	b2d2      	uxtb	r2, r2
     db4:	4313      	orrs	r3, r2
     db6:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
     dba:	6004      	str	r4, [r0, #0]
     dbc:	bd10      	pop	{r4, pc}

00000dbe <SSIEnable>:
     dbe:	6843      	ldr	r3, [r0, #4]
     dc0:	f043 0302 	orr.w	r3, r3, #2
     dc4:	6043      	str	r3, [r0, #4]
     dc6:	4770      	bx	lr

00000dc8 <SSIDataPut>:
     dc8:	68c3      	ldr	r3, [r0, #12]
     dca:	079b      	lsls	r3, r3, #30
     dcc:	d5fc      	bpl.n	dc8 <SSIDataPut>
     dce:	6081      	str	r1, [r0, #8]
     dd0:	4770      	bx	lr

00000dd2 <SSIDataGet>:
     dd2:	68c3      	ldr	r3, [r0, #12]
     dd4:	075a      	lsls	r2, r3, #29
     dd6:	d5fc      	bpl.n	dd2 <SSIDataGet>
     dd8:	6883      	ldr	r3, [r0, #8]
     dda:	600b      	str	r3, [r1, #0]
     ddc:	4770      	bx	lr
	...

00000de0 <SysCtlPeripheralEnable>:
     de0:	4b07      	ldr	r3, [pc, #28]	; (e00 <SysCtlPeripheralEnable+0x20>)
     de2:	b2c2      	uxtb	r2, r0
     de4:	f3c0 2007 	ubfx	r0, r0, #8, #8
     de8:	0092      	lsls	r2, r2, #2
     dea:	4403      	add	r3, r0
     dec:	f042 4284 	orr.w	r2, r2, #1107296256	; 0x42000000
     df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
     df4:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
     df8:	2201      	movs	r2, #1
     dfa:	601a      	str	r2, [r3, #0]
     dfc:	4770      	bx	lr
     dfe:	bf00      	nop
     e00:	400fe600 	.word	0x400fe600

00000e04 <SysCtlDelay>:
     e04:	3801      	subs	r0, #1
     e06:	f47f affd 	bne.w	e04 <SysCtlDelay>
     e0a:	4770      	bx	lr

00000e0c <SysCtlClockSet>:
     e0c:	4b42      	ldr	r3, [pc, #264]	; (f18 <SysCtlClockSet+0x10c>)
     e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e12:	4604      	mov	r4, r0
     e14:	4841      	ldr	r0, [pc, #260]	; (f1c <SysCtlClockSet+0x110>)
     e16:	6819      	ldr	r1, [r3, #0]
     e18:	6806      	ldr	r6, [r0, #0]
     e1a:	f421 0580 	bic.w	r5, r1, #4194304	; 0x400000
     e1e:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
     e22:	f446 6200 	orr.w	r2, r6, #2048	; 0x800
     e26:	07c9      	lsls	r1, r1, #31
     e28:	601d      	str	r5, [r3, #0]
     e2a:	6002      	str	r2, [r0, #0]
     e2c:	d514      	bpl.n	e58 <SysCtlClockSet+0x4c>
     e2e:	07e7      	lsls	r7, r4, #31
     e30:	d412      	bmi.n	e58 <SysCtlClockSet+0x4c>
     e32:	f064 0101 	orn	r1, r4, #1
     e36:	2a00      	cmp	r2, #0
     e38:	ea05 0501 	and.w	r5, r5, r1
     e3c:	601d      	str	r5, [r3, #0]
     e3e:	bfb4      	ite	lt
     e40:	f006 0330 	andlt.w	r3, r6, #48	; 0x30
     e44:	f005 0330 	andge.w	r3, r5, #48	; 0x30
     e48:	2b30      	cmp	r3, #48	; 0x30
     e4a:	bf0c      	ite	eq
     e4c:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
     e50:	f44f 2000 	movne.w	r0, #524288	; 0x80000
     e54:	f7ff ffd6 	bl	e04 <SysCtlDelay>
     e58:	f404 63fe 	and.w	r3, r4, #2032	; 0x7f0
     e5c:	f425 65fe 	bic.w	r5, r5, #2032	; 0x7f0
     e60:	ea45 0803 	orr.w	r8, r5, r3
     e64:	4a2e      	ldr	r2, [pc, #184]	; (f20 <SysCtlClockSet+0x114>)
     e66:	4f2c      	ldr	r7, [pc, #176]	; (f18 <SysCtlClockSet+0x10c>)
     e68:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
     e6c:	f025 0570 	bic.w	r5, r5, #112	; 0x70
     e70:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
     e74:	4022      	ands	r2, r4
     e76:	432a      	orrs	r2, r5
     e78:	4e28      	ldr	r6, [pc, #160]	; (f1c <SysCtlClockSet+0x110>)
     e7a:	f8c7 8000 	str.w	r8, [r7]
     e7e:	f004 0508 	and.w	r5, r4, #8
     e82:	ea42 05c5 	orr.w	r5, r2, r5, lsl #3
     e86:	6035      	str	r5, [r6, #0]
     e88:	2010      	movs	r0, #16
     e8a:	f7ff ffbb 	bl	e04 <SysCtlDelay>
     e8e:	f404 5100 	and.w	r1, r4, #8192	; 0x2000
     e92:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
     e96:	f428 5300 	bic.w	r3, r8, #8192	; 0x2000
     e9a:	4822      	ldr	r0, [pc, #136]	; (f24 <SysCtlClockSet+0x118>)
     e9c:	430a      	orrs	r2, r1
     e9e:	ea43 0301 	orr.w	r3, r3, r1
     ea2:	f04f 0540 	mov.w	r5, #64	; 0x40
     ea6:	4920      	ldr	r1, [pc, #128]	; (f28 <SysCtlClockSet+0x11c>)
     ea8:	6005      	str	r5, [r0, #0]
     eaa:	bf4a      	itet	mi
     eac:	6032      	strmi	r2, [r6, #0]
     eae:	603b      	strpl	r3, [r7, #0]
     eb0:	603b      	strmi	r3, [r7, #0]
     eb2:	f023 63f8 	bic.w	r3, r3, #130023424	; 0x7c00000
     eb6:	ea04 0101 	and.w	r1, r4, r1
     eba:	f023 0301 	bic.w	r3, r3, #1
     ebe:	bf58      	it	pl
     ec0:	6032      	strpl	r2, [r6, #0]
     ec2:	430b      	orrs	r3, r1
     ec4:	f022 52fc 	bic.w	r2, r2, #528482304	; 0x1f800000
     ec8:	f004 51fc 	and.w	r1, r4, #528482304	; 0x1f800000
     ecc:	0066      	lsls	r6, r4, #1
     ece:	ea42 0201 	orr.w	r2, r2, r1
     ed2:	d507      	bpl.n	ee4 <SysCtlClockSet+0xd8>
     ed4:	4915      	ldr	r1, [pc, #84]	; (f2c <SysCtlClockSet+0x120>)
     ed6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
     eda:	4021      	ands	r1, r4
     edc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     ee0:	430a      	orrs	r2, r1
     ee2:	e001      	b.n	ee8 <SysCtlClockSet+0xdc>
     ee4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
     ee8:	0525      	lsls	r5, r4, #20
     eea:	d40b      	bmi.n	f04 <SysCtlClockSet+0xf8>
     eec:	4810      	ldr	r0, [pc, #64]	; (f30 <SysCtlClockSet+0x124>)
     eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     ef2:	6804      	ldr	r4, [r0, #0]
     ef4:	0664      	lsls	r4, r4, #25
     ef6:	d401      	bmi.n	efc <SysCtlClockSet+0xf0>
     ef8:	3901      	subs	r1, #1
     efa:	d1fa      	bne.n	ef2 <SysCtlClockSet+0xe6>
     efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
     f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
     f04:	4904      	ldr	r1, [pc, #16]	; (f18 <SysCtlClockSet+0x10c>)
     f06:	600b      	str	r3, [r1, #0]
     f08:	4b04      	ldr	r3, [pc, #16]	; (f1c <SysCtlClockSet+0x110>)
     f0a:	2010      	movs	r0, #16
     f0c:	601a      	str	r2, [r3, #0]
     f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     f12:	f7ff bf77 	b.w	e04 <SysCtlDelay>
     f16:	bf00      	nop
     f18:	400fe060 	.word	0x400fe060
     f1c:	400fe070 	.word	0x400fe070
     f20:	80000030 	.word	0x80000030
     f24:	400fe058 	.word	0x400fe058
     f28:	07c00001 	.word	0x07c00001
     f2c:	40400000 	.word	0x40400000
     f30:	400fe050 	.word	0x400fe050

00000f34 <SysCtlClockGet>:
     f34:	4b2c      	ldr	r3, [pc, #176]	; (fe8 <SysCtlClockGet+0xb4>)
     f36:	681a      	ldr	r2, [r3, #0]
     f38:	3310      	adds	r3, #16
     f3a:	b570      	push	{r4, r5, r6, lr}
     f3c:	681b      	ldr	r3, [r3, #0]
     f3e:	2b00      	cmp	r3, #0
     f40:	bfb4      	ite	lt
     f42:	f003 0170 	andlt.w	r1, r3, #112	; 0x70
     f46:	f002 0130 	andge.w	r1, r2, #48	; 0x30
     f4a:	2920      	cmp	r1, #32
     f4c:	d00b      	beq.n	f66 <SysCtlClockGet+0x32>
     f4e:	d803      	bhi.n	f58 <SysCtlClockGet+0x24>
     f50:	b161      	cbz	r1, f6c <SysCtlClockGet+0x38>
     f52:	2910      	cmp	r1, #16
     f54:	d146      	bne.n	fe4 <SysCtlClockGet+0xb0>
     f56:	e006      	b.n	f66 <SysCtlClockGet+0x32>
     f58:	2930      	cmp	r1, #48	; 0x30
     f5a:	d004      	beq.n	f66 <SysCtlClockGet+0x32>
     f5c:	2970      	cmp	r1, #112	; 0x70
     f5e:	d141      	bne.n	fe4 <SysCtlClockGet+0xb0>
     f60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     f64:	e007      	b.n	f76 <SysCtlClockGet+0x42>
     f66:	f247 5030 	movw	r0, #30000	; 0x7530
     f6a:	e004      	b.n	f76 <SysCtlClockGet+0x42>
     f6c:	f3c2 1084 	ubfx	r0, r2, #6, #5
     f70:	491e      	ldr	r1, [pc, #120]	; (fec <SysCtlClockGet+0xb8>)
     f72:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
     f76:	2b00      	cmp	r3, #0
     f78:	da02      	bge.n	f80 <SysCtlClockGet+0x4c>
     f7a:	f413 6f00 	tst.w	r3, #2048	; 0x800
     f7e:	e001      	b.n	f84 <SysCtlClockGet+0x50>
     f80:	f412 6f00 	tst.w	r2, #2048	; 0x800
     f84:	d116      	bne.n	fb4 <SysCtlClockGet+0x80>
     f86:	491a      	ldr	r1, [pc, #104]	; (ff0 <SysCtlClockGet+0xbc>)
     f88:	680c      	ldr	r4, [r1, #0]
     f8a:	684d      	ldr	r5, [r1, #4]
     f8c:	f005 061f 	and.w	r6, r5, #31
     f90:	f3c5 2104 	ubfx	r1, r5, #8, #5
     f94:	3601      	adds	r6, #1
     f96:	0076      	lsls	r6, r6, #1
     f98:	3101      	adds	r1, #1
     f9a:	4371      	muls	r1, r6
     f9c:	fbb0 f1f1 	udiv	r1, r0, r1
     fa0:	f3c4 2089 	ubfx	r0, r4, #10, #10
     fa4:	4348      	muls	r0, r1
     fa6:	f3c4 0509 	ubfx	r5, r4, #0, #10
     faa:	0a80      	lsrs	r0, r0, #10
     fac:	fb05 0001 	mla	r0, r5, r1, r0
     fb0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
     fb4:	0256      	lsls	r6, r2, #9
     fb6:	d516      	bpl.n	fe6 <SysCtlClockGet+0xb2>
     fb8:	2b00      	cmp	r3, #0
     fba:	da0d      	bge.n	fd8 <SysCtlClockGet+0xa4>
     fbc:	005d      	lsls	r5, r3, #1
     fbe:	d505      	bpl.n	fcc <SysCtlClockGet+0x98>
     fc0:	051c      	lsls	r4, r3, #20
     fc2:	d403      	bmi.n	fcc <SysCtlClockGet+0x98>
     fc4:	0040      	lsls	r0, r0, #1
     fc6:	f3c3 5386 	ubfx	r3, r3, #22, #7
     fca:	e001      	b.n	fd0 <SysCtlClockGet+0x9c>
     fcc:	f3c3 53c5 	ubfx	r3, r3, #23, #6
     fd0:	3301      	adds	r3, #1
     fd2:	fbb0 f0f3 	udiv	r0, r0, r3
     fd6:	bd70      	pop	{r4, r5, r6, pc}
     fd8:	f3c2 52c3 	ubfx	r2, r2, #23, #4
     fdc:	3201      	adds	r2, #1
     fde:	fbb0 f0f2 	udiv	r0, r0, r2
     fe2:	bd70      	pop	{r4, r5, r6, pc}
     fe4:	2000      	movs	r0, #0
     fe6:	bd70      	pop	{r4, r5, r6, pc}
     fe8:	400fe060 	.word	0x400fe060
     fec:	00001144 	.word	0x00001144
     ff0:	400fe160 	.word	0x400fe160

00000ff4 <SysTickEnable>:
     ff4:	4b02      	ldr	r3, [pc, #8]	; (1000 <SysTickEnable+0xc>)
     ff6:	681a      	ldr	r2, [r3, #0]
     ff8:	f042 0205 	orr.w	r2, r2, #5
     ffc:	601a      	str	r2, [r3, #0]
     ffe:	4770      	bx	lr
    1000:	e000e010 	.word	0xe000e010

00001004 <SysTickIntEnable>:
    1004:	4b02      	ldr	r3, [pc, #8]	; (1010 <SysTickIntEnable+0xc>)
    1006:	681a      	ldr	r2, [r3, #0]
    1008:	f042 0202 	orr.w	r2, r2, #2
    100c:	601a      	str	r2, [r3, #0]
    100e:	4770      	bx	lr
    1010:	e000e010 	.word	0xe000e010

00001014 <SysTickPeriodSet>:
    1014:	4b01      	ldr	r3, [pc, #4]	; (101c <SysTickPeriodSet+0x8>)
    1016:	3801      	subs	r0, #1
    1018:	6018      	str	r0, [r3, #0]
    101a:	4770      	bx	lr
    101c:	e000e014 	.word	0xe000e014

00001020 <TimerEnable>:
    1020:	68c2      	ldr	r2, [r0, #12]
    1022:	f240 1301 	movw	r3, #257	; 0x101
    1026:	400b      	ands	r3, r1
    1028:	4313      	orrs	r3, r2
    102a:	60c3      	str	r3, [r0, #12]
    102c:	4770      	bx	lr

0000102e <TimerConfigure>:
    102e:	68c3      	ldr	r3, [r0, #12]
    1030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1034:	f023 0301 	bic.w	r3, r3, #1
    1038:	60c3      	str	r3, [r0, #12]
    103a:	0e0b      	lsrs	r3, r1, #24
    103c:	6003      	str	r3, [r0, #0]
    103e:	b2cb      	uxtb	r3, r1
    1040:	f3c1 2107 	ubfx	r1, r1, #8, #8
    1044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1048:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    104c:	6043      	str	r3, [r0, #4]
    104e:	6081      	str	r1, [r0, #8]
    1050:	4770      	bx	lr

00001052 <TimerLoadSet>:
    1052:	f011 0fff 	tst.w	r1, #255	; 0xff
    1056:	bf18      	it	ne
    1058:	6282      	strne	r2, [r0, #40]	; 0x28
    105a:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
    105e:	bf18      	it	ne
    1060:	62c2      	strne	r2, [r0, #44]	; 0x2c
    1062:	4770      	bx	lr

00001064 <TimerIntEnable>:
    1064:	6983      	ldr	r3, [r0, #24]
    1066:	4319      	orrs	r1, r3
    1068:	6181      	str	r1, [r0, #24]
    106a:	4770      	bx	lr

0000106c <TimerIntClear>:
    106c:	6241      	str	r1, [r0, #36]	; 0x24
    106e:	4770      	bx	lr

00001070 <CPUcpsie>:
    1070:	f3ef 8010 	mrs	r0, PRIMASK
    1074:	b662      	cpsie	i
    1076:	4770      	bx	lr

00001078 <g_ui32UARTBase>:
    1078:	c000 4000 d000 4000 e000 4000 2008 0008     ...@...@...@. ..
    1088:	0020 3130 3332 3534 3736 3938 6261 6463      .0123456789abcd
    1098:	6665 4500 5252 524f 0000 0000               ef.ERROR....

000010a4 <g_ui32UARTPeriph>:
    10a4:	1800 f000 1801 f000 1802 f000 2e25 4632     ............%.2F
    10b4:	0a0d 0000                                   ....

000010b8 <g_pui32GPIOBaseAddrs>:
    10b8:	4000 4000 8000 4005 5000 4000 9000 4005     .@.@...@.P.@...@
    10c8:	6000 4000 a000 4005 7000 4000 b000 4005     .`.@...@.p.@...@
    10d8:	4000 4002 c000 4005 5000 4002 d000 4005     .@.@...@.P.@...@
    10e8:	6000 4002 e000 4005 7000 4002 f000 4005     .`.@...@.p.@...@
    10f8:	d000 4003 0000 4006 1000 4006 1000 4006     ...@...@...@...@
    1108:	2000 4006 2000 4006 3000 4006 3000 4006     . .@. .@.0.@.0.@
    1118:	4000 4006 4000 4006 5000 4006 5000 4006     .@.@.@.@.P.@.P.@
    1128:	6000 4006 6000 4006                         .`.@.`.@

00001130 <g_pui32EnRegs>:
    1130:	e100 e000 e104 e000 e108 e000 e10c e000     ................
    1140:	e110 e000                                   ....

00001144 <g_pui32Xtals>:
    1144:	4240 000f 2000 001c 8480 001e 8000 0025     @B... ........%.
    1154:	9e99 0036 4000 0038 0900 003d 8000 003e     ..6..@8...=...>.
    1164:	0000 004b 4b40 004c 2000 004e 8d80 005b     ..K.@KL.. N...[.
    1174:	c000 005d 8000 0070 1200 007a 0000 007d     ..]...p...z...}.
    1184:	9680 0098 1b00 00b7 8000 00bb e8c0 00ce     ................
    1194:	7a64 00da 2400 00f4 0000 00fa a880 0112     dz...$..........
    11a4:	2d00 0131 3600 016e 7840 017d               .-1..6n.@x}.
